from sklearn.model_selection import GridSearchCV
from sklearn.exceptions import NotFittedError
from sklearn.utils.validation import check_is_fitted

class _CheckProba(object):
    def __init__(self, fn):
        self.fn = fn

    def __call__(self, *args, **kw):
        return self.fn(*args, **kw)

    def __get__(self, obj, type=None):
        if obj.loss not in ("log", "modified_huber"):
            raise AttributeError("probability estimates are not available for"
                                 " loss=%r" % obj.loss)
        return self.__class__(self.fn.__get__(obj, type))

class Estim(object):
    def __init__(self, loss='hinge'):
        self.loss=loss

    @_CheckProba
    def predict_proba(self, X):
        check_is_fitted(self, 'coef_')
        return np.arange(X.shape[0])

    def fit(self, X, y=None):
        self.coef_ = 1
        return self

    def __repr__(self):
        return "Estim(loss=%r)" % self.loss